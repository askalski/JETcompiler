;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

;!!Class definition: "Test":
%cls.Test = type { i32, i32 }

;!!class constructor:
define void @cc.Test(%cls.Test* %this) {
;!!end class constructor header
ret void
}
define void @testuj(%cls.Test* %this, i32 %uid.0, i32 %uid.1) {
%uid.2 = alloca i32
store i32 %uid.0, i32* %uid.2
%uid.3 = alloca i32
store i32 %uid.1, i32* %uid.3
;!!end function header
;!!begin AssignmentExpr:
;!!begin and end of IdentifierExpr, passing "%uid.2" as "nowe_pole1"
;!!begin IdentifierExpr, case This is type of Test:
%uid.4 = getelementptr %cls.Test* %this, i32 0
%uid.5 = bitcast %cls.Test* %uid.4 to i32*
;!!end IdentifierExpr
%uid.6 = load i32* %uid.2
store i32 %uid.6, i32* %uid.5
;!!end AssignmentExpr:
;!!begin AssignmentExpr:
;!!begin and end of IdentifierExpr, passing "%uid.3" as "nowe_pole2"
;!!begin IdentifierExpr, case This is type of Test:
%uid.7 = getelementptr %cls.Test* %this, i32 1
%uid.8 = bitcast %cls.Test* %uid.7 to i32*
;!!end IdentifierExpr
%uid.9 = load i32* %uid.3
store i32 %uid.9, i32* %uid.8
;!!end AssignmentExpr:
;!!ReturnStmt:
ret void
}
;!!end of class definition "Test"
define i32 @main() {
;!!end function header
;!!begin SimpleConstructorExpr
;!!begin Malloc.GenerateSingleAllocation([NamedType: Test]):
%uid.11 = getelementptr %cls.Test* null, i32 1
%uid.12 = ptrtoint %cls.Test* %uid.11 to i32
%uid.13 = call i8* @malloc (i32 %uid.12)
%uid.14 = bitcast i8* %uid.13 to %cls.Test*
;!!end Malloc.GenerateSingleAllocation([NamedType: Test]):
call void @cc.Test(%cls.Test* %uid.14)
;!!end SimpleConstructorExpr
;!!begin DeclarationStmt, FieldValue != null
%uid.10 = alloca %cls.Test
%uid.15 = load %cls.Test* %uid.14
store %cls.Test %uid.15, %cls.Test* %uid.10
;!!end DeclarationStmt
;!!begin DotOperaorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.10" as "t"
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.18 = alloca i32
store i32 10, i32* %uid.18
;!!end IntegerLiteral:
%uid.16 = load i32* %uid.18
;!!begin IntegerLiteral:
%uid.19 = alloca i32
store i32 23, i32* %uid.19
;!!end IntegerLiteral:
%uid.17 = load i32* %uid.19
call void @testuj(%cls.Test* %uid.10, i32 %uid.16, i32 %uid.17)
;!!end FuncalOperatorExpr
;!!end DotOperatorExpr
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.20 = alloca i32
store i32 0, i32* %uid.20
;!!end IntegerLiteral:
%uid.21 = load i32* %uid.20
ret i32 %uid.21
}
