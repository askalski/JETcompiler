;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

define i32 @main() {
;!!end function header
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.1 = call i8* @malloc (i32 3)
;!!end Malloc.GenerateStringAllocation():
%uid.2 = bitcast i8* %uid.1 to [3 x i8]*
store [3 x i8] c"&&\00", [3 x i8]* %uid.2
%uid.3 = alloca i8*
store i8* %uid.1, i8** %uid.3
;!!end StringLiteral
%uid.0 = load i8** %uid.3
call void @printString(i8* %uid.0)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.7 = alloca i32
store i32 1, i32* %uid.7
;!!end IntegerLiteral:
%uid.8 = load i32* %uid.7
%uid.9 = alloca i32
%uid.10 = sub i32 0, %uid.8
store i32 %uid.10, i32* %uid.9
;!!end UnaryMinusExpr
%uid.6 = load i32* %uid.9
%uid.11 = call i1 @test(i32 %uid.6)
;!!end FuncalOperatorExpr
%uid.12 = alloca i1
store i1 %uid.11, i1* %uid.12
%uid.5 = load i1* %uid.12
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.15 = alloca i32
store i32 0, i32* %uid.15
;!!end IntegerLiteral:
%uid.14 = load i32* %uid.15
%uid.16 = call i1 @test(i32 %uid.14)
;!!end FuncalOperatorExpr
%uid.17 = alloca i1
store i1 %uid.16, i1* %uid.17
%uid.13 = load i1* %uid.17
%uid.18 = and i1 %uid.5, %uid.13
%uid.19 = alloca i1
store i1 %uid.18, i1* %uid.19
;!!end LogicalOrExpr
%uid.4 = load i1* %uid.19
call void @printBool(i1 %uid.4)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.23 = alloca i32
store i32 2, i32* %uid.23
;!!end IntegerLiteral:
%uid.24 = load i32* %uid.23
%uid.25 = alloca i32
%uid.26 = sub i32 0, %uid.24
store i32 %uid.26, i32* %uid.25
;!!end UnaryMinusExpr
%uid.22 = load i32* %uid.25
%uid.27 = call i1 @test(i32 %uid.22)
;!!end FuncalOperatorExpr
%uid.28 = alloca i1
store i1 %uid.27, i1* %uid.28
%uid.21 = load i1* %uid.28
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.31 = alloca i32
store i32 1, i32* %uid.31
;!!end IntegerLiteral:
%uid.30 = load i32* %uid.31
%uid.32 = call i1 @test(i32 %uid.30)
;!!end FuncalOperatorExpr
%uid.33 = alloca i1
store i1 %uid.32, i1* %uid.33
%uid.29 = load i1* %uid.33
%uid.34 = and i1 %uid.21, %uid.29
%uid.35 = alloca i1
store i1 %uid.34, i1* %uid.35
;!!end LogicalOrExpr
%uid.20 = load i1* %uid.35
call void @printBool(i1 %uid.20)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.39 = alloca i32
store i32 3, i32* %uid.39
;!!end IntegerLiteral:
%uid.38 = load i32* %uid.39
%uid.40 = call i1 @test(i32 %uid.38)
;!!end FuncalOperatorExpr
%uid.41 = alloca i1
store i1 %uid.40, i1* %uid.41
%uid.37 = load i1* %uid.41
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.44 = alloca i32
store i32 5, i32* %uid.44
;!!end IntegerLiteral:
%uid.45 = load i32* %uid.44
%uid.46 = alloca i32
%uid.47 = sub i32 0, %uid.45
store i32 %uid.47, i32* %uid.46
;!!end UnaryMinusExpr
%uid.43 = load i32* %uid.46
%uid.48 = call i1 @test(i32 %uid.43)
;!!end FuncalOperatorExpr
%uid.49 = alloca i1
store i1 %uid.48, i1* %uid.49
%uid.42 = load i1* %uid.49
%uid.50 = and i1 %uid.37, %uid.42
%uid.51 = alloca i1
store i1 %uid.50, i1* %uid.51
;!!end LogicalOrExpr
%uid.36 = load i1* %uid.51
call void @printBool(i1 %uid.36)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.55 = alloca i32
store i32 234234, i32* %uid.55
;!!end IntegerLiteral:
%uid.54 = load i32* %uid.55
%uid.56 = call i1 @test(i32 %uid.54)
;!!end FuncalOperatorExpr
%uid.57 = alloca i1
store i1 %uid.56, i1* %uid.57
%uid.53 = load i1* %uid.57
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.60 = alloca i32
store i32 21321, i32* %uid.60
;!!end IntegerLiteral:
%uid.59 = load i32* %uid.60
%uid.61 = call i1 @test(i32 %uid.59)
;!!end FuncalOperatorExpr
%uid.62 = alloca i1
store i1 %uid.61, i1* %uid.62
%uid.58 = load i1* %uid.62
%uid.63 = and i1 %uid.53, %uid.58
%uid.64 = alloca i1
store i1 %uid.63, i1* %uid.64
;!!end LogicalOrExpr
%uid.52 = load i1* %uid.64
call void @printBool(i1 %uid.52)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.66 = call i8* @malloc (i32 3)
;!!end Malloc.GenerateStringAllocation():
%uid.67 = bitcast i8* %uid.66 to [3 x i8]*
store [3 x i8] c"||\00", [3 x i8]* %uid.67
%uid.68 = alloca i8*
store i8* %uid.66, i8** %uid.68
;!!end StringLiteral
%uid.65 = load i8** %uid.68
call void @printString(i8* %uid.65)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.72 = alloca i32
store i32 1, i32* %uid.72
;!!end IntegerLiteral:
%uid.73 = load i32* %uid.72
%uid.74 = alloca i32
%uid.75 = sub i32 0, %uid.73
store i32 %uid.75, i32* %uid.74
;!!end UnaryMinusExpr
%uid.71 = load i32* %uid.74
%uid.76 = call i1 @test(i32 %uid.71)
;!!end FuncalOperatorExpr
%uid.77 = alloca i1
store i1 %uid.76, i1* %uid.77
%uid.70 = load i1* %uid.77
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.80 = alloca i32
store i32 0, i32* %uid.80
;!!end IntegerLiteral:
%uid.79 = load i32* %uid.80
%uid.81 = call i1 @test(i32 %uid.79)
;!!end FuncalOperatorExpr
%uid.82 = alloca i1
store i1 %uid.81, i1* %uid.82
%uid.78 = load i1* %uid.82
%uid.83 = or i1 %uid.70, %uid.78
%uid.84 = alloca i1
store i1 %uid.83, i1* %uid.84
;!!end LogicalOrExpr
%uid.69 = load i1* %uid.84
call void @printBool(i1 %uid.69)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.88 = alloca i32
store i32 2, i32* %uid.88
;!!end IntegerLiteral:
%uid.89 = load i32* %uid.88
%uid.90 = alloca i32
%uid.91 = sub i32 0, %uid.89
store i32 %uid.91, i32* %uid.90
;!!end UnaryMinusExpr
%uid.87 = load i32* %uid.90
%uid.92 = call i1 @test(i32 %uid.87)
;!!end FuncalOperatorExpr
%uid.93 = alloca i1
store i1 %uid.92, i1* %uid.93
%uid.86 = load i1* %uid.93
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.96 = alloca i32
store i32 1, i32* %uid.96
;!!end IntegerLiteral:
%uid.95 = load i32* %uid.96
%uid.97 = call i1 @test(i32 %uid.95)
;!!end FuncalOperatorExpr
%uid.98 = alloca i1
store i1 %uid.97, i1* %uid.98
%uid.94 = load i1* %uid.98
%uid.99 = or i1 %uid.86, %uid.94
%uid.100 = alloca i1
store i1 %uid.99, i1* %uid.100
;!!end LogicalOrExpr
%uid.85 = load i1* %uid.100
call void @printBool(i1 %uid.85)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.104 = alloca i32
store i32 3, i32* %uid.104
;!!end IntegerLiteral:
%uid.103 = load i32* %uid.104
%uid.105 = call i1 @test(i32 %uid.103)
;!!end FuncalOperatorExpr
%uid.106 = alloca i1
store i1 %uid.105, i1* %uid.106
%uid.102 = load i1* %uid.106
;!!begin FuncallOperatorExpr:
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.109 = alloca i32
store i32 5, i32* %uid.109
;!!end IntegerLiteral:
%uid.110 = load i32* %uid.109
%uid.111 = alloca i32
%uid.112 = sub i32 0, %uid.110
store i32 %uid.112, i32* %uid.111
;!!end UnaryMinusExpr
%uid.108 = load i32* %uid.111
%uid.113 = call i1 @test(i32 %uid.108)
;!!end FuncalOperatorExpr
%uid.114 = alloca i1
store i1 %uid.113, i1* %uid.114
%uid.107 = load i1* %uid.114
%uid.115 = or i1 %uid.102, %uid.107
%uid.116 = alloca i1
store i1 %uid.115, i1* %uid.116
;!!end LogicalOrExpr
%uid.101 = load i1* %uid.116
call void @printBool(i1 %uid.101)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.120 = alloca i32
store i32 234234, i32* %uid.120
;!!end IntegerLiteral:
%uid.119 = load i32* %uid.120
%uid.121 = call i1 @test(i32 %uid.119)
;!!end FuncalOperatorExpr
%uid.122 = alloca i1
store i1 %uid.121, i1* %uid.122
%uid.118 = load i1* %uid.122
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.125 = alloca i32
store i32 21321, i32* %uid.125
;!!end IntegerLiteral:
%uid.124 = load i32* %uid.125
%uid.126 = call i1 @test(i32 %uid.124)
;!!end FuncalOperatorExpr
%uid.127 = alloca i1
store i1 %uid.126, i1* %uid.127
%uid.123 = load i1* %uid.127
%uid.128 = or i1 %uid.118, %uid.123
%uid.129 = alloca i1
store i1 %uid.128, i1* %uid.129
;!!end LogicalOrExpr
%uid.117 = load i1* %uid.129
call void @printBool(i1 %uid.117)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.131 = call i8* @malloc (i32 2)
;!!end Malloc.GenerateStringAllocation():
%uid.132 = bitcast i8* %uid.131 to [2 x i8]*
store [2 x i8] c"!\00", [2 x i8]* %uid.132
%uid.133 = alloca i8*
store i8* %uid.131, i8** %uid.133
;!!end StringLiteral
%uid.130 = load i8** %uid.133
call void @printString(i8* %uid.130)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.135 = alloca i1
store i1 1, i1* %uid.135
;!!end BooleanLiteral:
%uid.134 = load i1* %uid.135
call void @printBool(i1 %uid.134)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.137 = alloca i1
store i1 0, i1* %uid.137
;!!end BooleanLiteral:
%uid.136 = load i1* %uid.137
call void @printBool(i1 %uid.136)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.138 = alloca i32
store i32 0, i32* %uid.138
;!!end IntegerLiteral:
%uid.139 = load i32* %uid.138
ret i32 %uid.139
}
define void @printBool(i1 %uid.140) {
%uid.141 = alloca i1
store i1 %uid.140, i1* %uid.141
;!!end function header
;!! IfteStmt
;!!begin LogicalNot:
;!!begin and end of IdentifierExpr, passing "%uid.141" as "b"
%uid.142 = load i1* %uid.141
%uid.144 = xor i1 1, %uid.142
%uid.143 = alloca i1
store i1 %uid.144, i1* %uid.143;!!end LogicalNot
%uid.145 = load i1* %uid.143
br i1 %uid.145, label %Label0IfteTrue, label %Label1IfteFalse
Label0IfteTrue:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.147 = call i8* @malloc (i32 6)
;!!end Malloc.GenerateStringAllocation():
%uid.148 = bitcast i8* %uid.147 to [6 x i8]*
store [6 x i8] c"false\00", [6 x i8]* %uid.148
%uid.149 = alloca i8*
store i8* %uid.147, i8** %uid.149
;!!end StringLiteral
%uid.146 = load i8** %uid.149
call void @printString(i8* %uid.146)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label1IfteFalse:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.151 = call i8* @malloc (i32 5)
;!!end Malloc.GenerateStringAllocation():
%uid.152 = bitcast i8* %uid.151 to [5 x i8]*
store [5 x i8] c"true\00", [5 x i8]* %uid.152
%uid.153 = alloca i8*
store i8* %uid.151, i8** %uid.153
;!!end StringLiteral
%uid.150 = load i8** %uid.153
call void @printString(i8* %uid.150)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label2IfteEnd:
;!!end ifte
;!!ReturnStmt:
ret void
}
define i1 @test(i32 %uid.154) {
%uid.155 = alloca i32
store i32 %uid.154, i32* %uid.155
;!!end function header
;!!begin FuncallOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.155" as "i"
%uid.156 = load i32* %uid.155
call void @printInt(i32 %uid.156)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin RelationExpr:
;!!begin and end of IdentifierExpr, passing "%uid.155" as "i"
%uid.157 = load i32* %uid.155
;!!begin IntegerLiteral:
%uid.159 = alloca i32
store i32 0, i32* %uid.159
;!!end IntegerLiteral:
%uid.158 = load i32* %uid.159
%uid.160 = icmp sgt i32 %uid.157, %uid.158
%uid.161 = alloca i1
store i1 %uid.160, i1* %uid.161
;!!end RelationExpr
%uid.162 = load i1* %uid.161
ret i1 %uid.162
}
