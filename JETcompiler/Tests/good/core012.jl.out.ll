;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

define i32 @main() {
;!!end function header
;!!begin IntegerLiteral:
%uid.1 = alloca i32
store i32 56, i32* %uid.1
;!!end IntegerLiteral:
;!!begin DeclarationStmt, FieldValue != null
%uid.0 = alloca i32
%uid.2 = load i32* %uid.1
store i32 %uid.2, i32* %uid.0
;!!end DeclarationStmt
;!!begin UnaryMinus:
;!!begin IntegerLiteral:
%uid.4 = alloca i32
store i32 23, i32* %uid.4
;!!end IntegerLiteral:
%uid.5 = load i32* %uid.4
%uid.6 = alloca i32
%uid.7 = sub i32 0, %uid.5
store i32 %uid.7, i32* %uid.6
;!!end UnaryMinusExpr
;!!begin DeclarationStmt, FieldValue != null
%uid.3 = alloca i32
%uid.8 = load i32* %uid.6
store i32 %uid.8, i32* %uid.3
;!!end DeclarationStmt
;!!begin FuncallOperatorExpr:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.10 = load i32* %uid.0
;!!begin and end of IdentifierExpr, passing "%uid.3" as "y"
%uid.11 = load i32* %uid.3
%uid.12 = add i32 %uid.10, %uid.11
%uid.13 = alloca i32
store i32 %uid.12, i32* %uid.13
;!!end AddExpr:
%uid.9 = load i32* %uid.13
call void @printInt(i32 %uid.9)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.15 = load i32* %uid.0
;!!begin and end of IdentifierExpr, passing "%uid.3" as "y"
%uid.16 = load i32* %uid.3
%uid.17 = sub i32 %uid.15, %uid.16
%uid.18 = alloca i32
store i32 %uid.17, i32* %uid.18
;!!end AddExpr:
%uid.14 = load i32* %uid.18
call void @printInt(i32 %uid.14)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin MultExpr:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.20 = load i32* %uid.0
;!!begin and end of IdentifierExpr, passing "%uid.3" as "y"
%uid.21 = load i32* %uid.3
%uid.22 = mul i32 %uid.20, %uid.21
%uid.23 = alloca i32
store i32 %uid.22, i32* %uid.23
;!!end MultExpr
%uid.19 = load i32* %uid.23
call void @printInt(i32 %uid.19)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin MultExpr:
;!!begin IntegerLiteral:
%uid.26 = alloca i32
store i32 45, i32* %uid.26
;!!end IntegerLiteral:
%uid.25 = load i32* %uid.26
;!!begin IntegerLiteral:
%uid.28 = alloca i32
store i32 2, i32* %uid.28
;!!end IntegerLiteral:
%uid.27 = load i32* %uid.28
%uid.29 = udiv i32 %uid.25, %uid.27
%uid.30 = alloca i32
store i32 %uid.29, i32* %uid.30
;!!end MultExpr
%uid.24 = load i32* %uid.30
call void @printInt(i32 %uid.24)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin MultExpr:
;!!begin IntegerLiteral:
%uid.33 = alloca i32
store i32 78, i32* %uid.33
;!!end IntegerLiteral:
%uid.32 = load i32* %uid.33
;!!begin IntegerLiteral:
%uid.35 = alloca i32
store i32 3, i32* %uid.35
;!!end IntegerLiteral:
%uid.34 = load i32* %uid.35
%uid.36 = urem i32 %uid.32, %uid.34
%uid.37 = alloca i32
store i32 %uid.36, i32* %uid.37
;!!end MultExpr
%uid.31 = load i32* %uid.37
call void @printInt(i32 %uid.31)
;!!end FuncalOperatorExpr
;!!begin UnaryMinus:
;!!begin DoubleLiteral:
%uid.39 = alloca double
store double 9.3, double* %uid.39
;!!end DoubleLiteral:
%uid.40 = load double* %uid.39
%uid.41 = alloca double
%uid.42 = fsub double 0.0, %uid.40
store double %uid.42, double* %uid.41
;!!end UnaryMinusExpr
;!!begin DeclarationStmt, FieldValue != null
%uid.38 = alloca double
%uid.43 = load double* %uid.41
store double %uid.43, double* %uid.38
;!!end DeclarationStmt
;!!begin DoubleLiteral:
%uid.45 = alloca double
store double 5.1, double* %uid.45
;!!end DoubleLiteral:
;!!begin DeclarationStmt, FieldValue != null
%uid.44 = alloca double
%uid.46 = load double* %uid.45
store double %uid.46, double* %uid.44
;!!end DeclarationStmt
;!!begin FuncallOperatorExpr:
;!!begin RelationExpr:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.38" as "z"
%uid.49 = load double* %uid.38
;!!begin and end of IdentifierExpr, passing "%uid.44" as "w"
%uid.50 = load double* %uid.44
%uid.51 = fadd double %uid.49, %uid.50
%uid.52 = alloca double
store double %uid.51, double* %uid.52
;!!end AddExpr:
%uid.48 = load double* %uid.52
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.38" as "z"
%uid.54 = load double* %uid.38
;!!begin and end of IdentifierExpr, passing "%uid.44" as "w"
%uid.55 = load double* %uid.44
%uid.56 = fsub double %uid.54, %uid.55
%uid.57 = alloca double
store double %uid.56, double* %uid.57
;!!end AddExpr:
%uid.53 = load double* %uid.57
%uid.58 = ERROR double %uid.48, %uid.53
%uid.59 = alloca i1
store i1 %uid.58, i1* %uid.59
;!!end RelationExpr
%uid.47 = load i1* %uid.59
call void @printBool(i1 %uid.47)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin RelationExpr:
;!!begin MultExpr:
;!!begin and end of IdentifierExpr, passing "%uid.38" as "z"
%uid.62 = load double* %uid.38
;!!begin and end of IdentifierExpr, passing "%uid.44" as "w"
%uid.63 = load double* %uid.44
%uid.64 = udiv double %uid.62, %uid.63
%uid.65 = alloca double
store double %uid.64, double* %uid.65
;!!end MultExpr
%uid.61 = load double* %uid.65
;!!begin MultExpr:
;!!begin and end of IdentifierExpr, passing "%uid.38" as "z"
%uid.67 = load double* %uid.38
;!!begin and end of IdentifierExpr, passing "%uid.44" as "w"
%uid.68 = load double* %uid.44
%uid.69 = mul double %uid.67, %uid.68
%uid.70 = alloca double
store double %uid.69, double* %uid.70
;!!end MultExpr
%uid.66 = load double* %uid.70
%uid.71 = ERROR double %uid.61, %uid.66
%uid.72 = alloca i1
store i1 %uid.71, i1* %uid.72
;!!end RelationExpr
%uid.60 = load i1* %uid.72
call void @printBool(i1 %uid.60)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.73 = alloca i32
store i32 0, i32* %uid.73
;!!end IntegerLiteral:
%uid.74 = load i32* %uid.73
ret i32 %uid.74
}
define void @printBool(i1 %uid.75) {
%uid.76 = alloca i1
store i1 %uid.75, i1* %uid.76
;!!end function header
;!! IfteStmt
;!!begin and end of IdentifierExpr, passing "%uid.76" as "b"
%uid.77 = load i1* %uid.76
br i1 %uid.77, label %Label0IfteTrue, label %Label1IfteFalse
Label0IfteTrue:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.79 = call i8* @malloc (i32 5)
;!!end Malloc.GenerateStringAllocation():
%uid.80 = bitcast i8* %uid.79 to [5 x i8]*
store [5 x i8] c"true\00", [5 x i8]* %uid.80
%uid.81 = alloca i8*
store i8* %uid.79, i8** %uid.81
;!!end StringLiteral
%uid.78 = load i8** %uid.81
call void @printString(i8* %uid.78)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
ret void
br label %Label2IfteEnd
Label1IfteFalse:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.83 = call i8* @malloc (i32 6)
;!!end Malloc.GenerateStringAllocation():
%uid.84 = bitcast i8* %uid.83 to [6 x i8]*
store [6 x i8] c"false\00", [6 x i8]* %uid.84
%uid.85 = alloca i8*
store i8* %uid.83, i8** %uid.85
;!!end StringLiteral
%uid.82 = load i8** %uid.85
call void @printString(i8* %uid.82)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
ret void
br label %Label2IfteEnd
Label2IfteEnd:
;!!end ifte
}
