;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

define i32 @main() {
;!!end function header
;!!begin FuncallOperatorExpr:
%uid.1 = call i32 @readInt()
;!!end FuncalOperatorExpr
%uid.2 = alloca i32
store i32 %uid.1, i32* %uid.2
;!!begin DeclarationStmt, FieldValue != null
%uid.0 = alloca i32
%uid.3 = load i32* %uid.2
store i32 %uid.3, i32* %uid.0
;!!end DeclarationStmt
;!!begin FuncallOperatorExpr:
%uid.5 = call double @readDouble()
;!!end FuncalOperatorExpr
%uid.6 = alloca double
store double %uid.5, double* %uid.6
;!!begin DeclarationStmt, FieldValue != null
%uid.4 = alloca double
%uid.7 = load double* %uid.6
store double %uid.7, double* %uid.4
;!!end DeclarationStmt
;!!begin FuncallOperatorExpr:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.9 = load i32* %uid.0
;!!begin IntegerLiteral:
%uid.11 = alloca i32
store i32 5, i32* %uid.11
;!!end IntegerLiteral:
%uid.10 = load i32* %uid.11
%uid.12 = sub i32 %uid.9, %uid.10
%uid.13 = alloca i32
store i32 %uid.12, i32* %uid.13
;!!end AddExpr:
%uid.8 = load i32* %uid.13
call void @printInt(i32 %uid.8)
;!!end FuncalOperatorExpr
;!! IfteStmt
;!!begin LogicalOrExpr:
;!!begin RelationExpr:
;!!begin and end of IdentifierExpr, passing "%uid.4" as "y"
%uid.15 = load double* %uid.4
;!!begin DoubleLiteral:
%uid.17 = alloca double
store double 42.0, double* %uid.17
;!!end DoubleLiteral:
%uid.16 = load double* %uid.17
%uid.18 = ERROR double %uid.15, %uid.16
%uid.19 = alloca i1
store i1 %uid.18, i1* %uid.19
;!!end RelationExpr
%uid.14 = load i1* %uid.19
;!!begin RelationExpr:
;!!begin and end of IdentifierExpr, passing "%uid.4" as "y"
%uid.21 = load double* %uid.4
;!!begin DoubleLiteral:
%uid.23 = alloca double
store double 43.0, double* %uid.23
;!!end DoubleLiteral:
%uid.22 = load double* %uid.23
%uid.24 = ERROR double %uid.21, %uid.22
%uid.25 = alloca i1
store i1 %uid.24, i1* %uid.25
;!!end RelationExpr
%uid.20 = load i1* %uid.25
%uid.26 = or i1 %uid.14, %uid.20
%uid.27 = alloca i1
store i1 %uid.26, i1* %uid.27
;!!end LogicalOrExpr
%uid.28 = load i1* %uid.27
br i1 %uid.28, label %Label0IfteTrue, label %Label1IfteFalse
Label0IfteTrue:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.30 = call i8* @malloc (i32 5)
;!!end Malloc.GenerateStringAllocation():
%uid.31 = bitcast i8* %uid.30 to [5 x i8]*
store [5 x i8] c"yay!\00", [5 x i8]* %uid.31
%uid.32 = alloca i8*
store i8* %uid.30, i8** %uid.32
;!!end StringLiteral
%uid.29 = load i8** %uid.32
call void @printString(i8* %uid.29)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label1IfteFalse:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.34 = call i8* @malloc (i32 5)
;!!end Malloc.GenerateStringAllocation():
%uid.35 = bitcast i8* %uid.34 to [5 x i8]*
store [5 x i8] c"nay!\00", [5 x i8]* %uid.35
%uid.36 = alloca i8*
store i8* %uid.34, i8** %uid.36
;!!end StringLiteral
%uid.33 = load i8** %uid.36
call void @printString(i8* %uid.33)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label2IfteEnd:
;!!end ifte
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.37 = alloca i32
store i32 0, i32* %uid.37
;!!end IntegerLiteral:
%uid.38 = load i32* %uid.37
ret i32 %uid.38
}
