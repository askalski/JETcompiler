;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

define i32 @main() {
;!!end function header
;!!begin IntegerLiteral:
%uid.1 = alloca i32
store i32 4, i32* %uid.1
;!!end IntegerLiteral:
;!!begin DeclarationStmt, FieldValue != null
%uid.0 = alloca i32
%uid.2 = load i32* %uid.1
store i32 %uid.2, i32* %uid.0
;!!end DeclarationStmt
;!! IfteStmt
;!!begin LogicalOrExpr:
;!!begin LogicalOrExpr:
;!!begin RelationExpr:
;!!begin IntegerLiteral:
%uid.6 = alloca i32
store i32 3, i32* %uid.6
;!!end IntegerLiteral:
%uid.5 = load i32* %uid.6
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.7 = load i32* %uid.0
%uid.8 = icmp slr i32 %uid.5, %uid.7
%uid.9 = alloca i1
store i1 %uid.8, i1* %uid.9
;!!end RelationExpr
%uid.4 = load i1* %uid.9
;!!begin EqualExpr:
;!!begin IntegerLiteral:
%uid.12 = alloca i32
store i32 4, i32* %uid.12
;!!end IntegerLiteral:
%uid.11 = load i32* %uid.12
;!!begin IntegerLiteral:
%uid.14 = alloca i32
store i32 2, i32* %uid.14
;!!end IntegerLiteral:
%uid.13 = load i32* %uid.14
%uid.15 = icmp ne i32 %uid.11, %uid.13
%uid.16 = alloca i1
store i1 %uid.15, i1* %uid.16
;!!end EqualExpr:
%uid.10 = load i1* %uid.16
%uid.17 = and i1 %uid.4, %uid.10
%uid.18 = alloca i1
store i1 %uid.17, i1* %uid.18
;!!end LogicalOrExpr
%uid.3 = load i1* %uid.18
;!!begin BooleanLiteral:
%uid.20 = alloca i1
store i1 1, i1* %uid.20
;!!end BooleanLiteral:
%uid.19 = load i1* %uid.20
%uid.21 = and i1 %uid.3, %uid.19
%uid.22 = alloca i1
store i1 %uid.21, i1* %uid.22
;!!end LogicalOrExpr
%uid.23 = load i1* %uid.22
br i1 %uid.23, label %Label0IfteTrue, label %Label1IfteFalse
Label0IfteTrue:
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.25 = alloca i1
store i1 1, i1* %uid.25
;!!end BooleanLiteral:
%uid.24 = load i1* %uid.25
call void @printBool(i1 %uid.24)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label1IfteFalse:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.27 = call i8* @malloc (i32 4)
;!!end Malloc.GenerateStringAllocation():
%uid.28 = bitcast i8* %uid.27 to [4 x i8]*
store [4 x i8] c"apa\00", [4 x i8]* %uid.28
%uid.29 = alloca i8*
store i8* %uid.27, i8** %uid.29
;!!end StringLiteral
%uid.26 = load i8** %uid.29
call void @printString(i8* %uid.26)
;!!end FuncalOperatorExpr
br label %Label2IfteEnd
Label2IfteEnd:
;!!end ifte
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin EqualExpr:
;!!begin BooleanLiteral:
%uid.33 = alloca i1
store i1 1, i1* %uid.33
;!!end BooleanLiteral:
%uid.32 = load i1* %uid.33
;!!begin BooleanLiteral:
%uid.35 = alloca i1
store i1 1, i1* %uid.35
;!!end BooleanLiteral:
%uid.34 = load i1* %uid.35
%uid.36 = icmp eqi1%uid.32, %uid.34
%uid.37 = alloca i1
store i1 %uid.36, i1* %uid.37
;!!end EqualExpr:
%uid.31 = load i1* %uid.37
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.40 = alloca i32
store i32 1, i32* %uid.40
;!!end IntegerLiteral:
%uid.39 = load i32* %uid.40
%uid.41 = call i1 @dontCallMe(i32 %uid.39)
;!!end FuncalOperatorExpr
%uid.42 = alloca i1
store i1 %uid.41, i1* %uid.42
%uid.38 = load i1* %uid.42
%uid.43 = or i1 %uid.31, %uid.38
%uid.44 = alloca i1
store i1 %uid.43, i1* %uid.44
;!!end LogicalOrExpr
%uid.30 = load i1* %uid.44
call void @printBool(i1 %uid.30)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin RelationExpr:
;!!begin FloatLiteral:
%uid.48 = alloca float
store float 4.0, float* %uid.48
;!!end FloatLiteral:
%uid.47 = load float* %uid.48
;!!begin UnaryMinus:
;!!begin FloatLiteral:
%uid.50 = alloca float
store float 50.0, float* %uid.50
;!!end FloatLiteral:
%uid.51 = load float* %uid.50
%uid.52 = alloca float
%uid.53 = fsub float 0.0, %uid.51
store float %uid.53, float* %uid.52
;!!end UnaryMinusExpr
%uid.49 = load float* %uid.52
%uid.54 = fcmp olt float %uid.47, %uid.49
%uid.55 = alloca i1
store i1 %uid.54, i1* %uid.55
;!!end RelationExpr
%uid.46 = load i1* %uid.55
;!!begin FuncallOperatorExpr:
;!!begin IntegerLiteral:
%uid.58 = alloca i32
store i32 2, i32* %uid.58
;!!end IntegerLiteral:
%uid.57 = load i32* %uid.58
%uid.59 = call i1 @dontCallMe(i32 %uid.57)
;!!end FuncalOperatorExpr
%uid.60 = alloca i1
store i1 %uid.59, i1* %uid.60
%uid.56 = load i1* %uid.60
%uid.61 = and i1 %uid.46, %uid.56
%uid.62 = alloca i1
store i1 %uid.61, i1* %uid.62
;!!end LogicalOrExpr
%uid.45 = load i1* %uid.62
call void @printBool(i1 %uid.45)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin LogicalOrExpr:
;!!begin LogicalOrExpr:
;!!begin EqualExpr:
;!!begin IntegerLiteral:
%uid.67 = alloca i32
store i32 4, i32* %uid.67
;!!end IntegerLiteral:
%uid.66 = load i32* %uid.67
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.68 = load i32* %uid.0
%uid.69 = icmp eq i32 %uid.66, %uid.68
%uid.70 = alloca i1
store i1 %uid.69, i1* %uid.70
;!!end EqualExpr:
%uid.65 = load i1* %uid.70
;!!begin EqualExpr:
;!!begin BooleanLiteral:
%uid.73 = alloca i1
store i1 1, i1* %uid.73
;!!end BooleanLiteral:
%uid.72 = load i1* %uid.73
;!!begin LogicalNot:
;!!begin BooleanLiteral:
%uid.75 = alloca i1
store i1 0, i1* %uid.75
;!!end BooleanLiteral:
%uid.76 = load i1* %uid.75
%uid.78 = xor i1 1, %uid.76
%uid.77 = alloca i1
store i1 %uid.78, i1* %uid.77;!!end LogicalNot
%uid.74 = load i1* %uid.77
%uid.79 = icmp eqi1%uid.72, %uid.74
%uid.80 = alloca i1
store i1 %uid.79, i1* %uid.80
;!!end EqualExpr:
%uid.71 = load i1* %uid.80
%uid.81 = and i1 %uid.65, %uid.71
%uid.82 = alloca i1
store i1 %uid.81, i1* %uid.82
;!!end LogicalOrExpr
%uid.64 = load i1* %uid.82
;!!begin BooleanLiteral:
%uid.84 = alloca i1
store i1 1, i1* %uid.84
;!!end BooleanLiteral:
%uid.83 = load i1* %uid.84
%uid.85 = and i1 %uid.64, %uid.83
%uid.86 = alloca i1
store i1 %uid.85, i1* %uid.86
;!!end LogicalOrExpr
%uid.63 = load i1* %uid.86
call void @printBool(i1 %uid.63)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.90 = alloca i1
store i1 0, i1* %uid.90
;!!end BooleanLiteral:
%uid.88 = load i1* %uid.90
;!!begin BooleanLiteral:
%uid.91 = alloca i1
store i1 0, i1* %uid.91
;!!end BooleanLiteral:
%uid.89 = load i1* %uid.91
%uid.92 = call i1 @implies(i1 %uid.88, i1 %uid.89)
;!!end FuncalOperatorExpr
%uid.93 = alloca i1
store i1 %uid.92, i1* %uid.93
%uid.87 = load i1* %uid.93
call void @printBool(i1 %uid.87)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.97 = alloca i1
store i1 0, i1* %uid.97
;!!end BooleanLiteral:
%uid.95 = load i1* %uid.97
;!!begin BooleanLiteral:
%uid.98 = alloca i1
store i1 1, i1* %uid.98
;!!end BooleanLiteral:
%uid.96 = load i1* %uid.98
%uid.99 = call i1 @implies(i1 %uid.95, i1 %uid.96)
;!!end FuncalOperatorExpr
%uid.100 = alloca i1
store i1 %uid.99, i1* %uid.100
%uid.94 = load i1* %uid.100
call void @printBool(i1 %uid.94)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.104 = alloca i1
store i1 1, i1* %uid.104
;!!end BooleanLiteral:
%uid.102 = load i1* %uid.104
;!!begin BooleanLiteral:
%uid.105 = alloca i1
store i1 0, i1* %uid.105
;!!end BooleanLiteral:
%uid.103 = load i1* %uid.105
%uid.106 = call i1 @implies(i1 %uid.102, i1 %uid.103)
;!!end FuncalOperatorExpr
%uid.107 = alloca i1
store i1 %uid.106, i1* %uid.107
%uid.101 = load i1* %uid.107
call void @printBool(i1 %uid.101)
;!!end FuncalOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin FuncallOperatorExpr:
;!!begin BooleanLiteral:
%uid.111 = alloca i1
store i1 1, i1* %uid.111
;!!end BooleanLiteral:
%uid.109 = load i1* %uid.111
;!!begin BooleanLiteral:
%uid.112 = alloca i1
store i1 1, i1* %uid.112
;!!end BooleanLiteral:
%uid.110 = load i1* %uid.112
%uid.113 = call i1 @implies(i1 %uid.109, i1 %uid.110)
;!!end FuncalOperatorExpr
%uid.114 = alloca i1
store i1 %uid.113, i1* %uid.114
%uid.108 = load i1* %uid.114
call void @printBool(i1 %uid.108)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.115 = alloca i32
store i32 0, i32* %uid.115
;!!end IntegerLiteral:
%uid.116 = load i32* %uid.115
ret i32 %uid.116
}
define i1 @dontCallMe(i32 %uid.117) {
%uid.118 = alloca i32
store i32 %uid.117, i32* %uid.118
;!!end function header
;!!begin FuncallOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.118" as "x"
%uid.119 = load i32* %uid.118
call void @printInt(i32 %uid.119)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin BooleanLiteral:
%uid.120 = alloca i1
store i1 1, i1* %uid.120
;!!end BooleanLiteral:
%uid.121 = load i1* %uid.120
ret i1 %uid.121
}
define void @printBool(i1 %uid.122) {
%uid.123 = alloca i1
store i1 %uid.122, i1* %uid.123
;!!end function header
;!! IfteStmt
;!!begin and end of IdentifierExpr, passing "%uid.123" as "b"
%uid.124 = load i1* %uid.123
br i1 %uid.124, label %Label3IfteTrue, label %Label4IfteFalse
Label3IfteTrue:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.126 = call i8* @malloc (i32 5)
;!!end Malloc.GenerateStringAllocation():
%uid.127 = bitcast i8* %uid.126 to [5 x i8]*
store [5 x i8] c"true\00", [5 x i8]* %uid.127
%uid.128 = alloca i8*
store i8* %uid.126, i8** %uid.128
;!!end StringLiteral
%uid.125 = load i8** %uid.128
call void @printString(i8* %uid.125)
;!!end FuncalOperatorExpr
br label %Label5IfteEnd
Label4IfteFalse:
;!!begin FuncallOperatorExpr:
;!!begin StringLiteral:
;!!begin Malloc.GenerateStringAllocation():
%uid.130 = call i8* @malloc (i32 6)
;!!end Malloc.GenerateStringAllocation():
%uid.131 = bitcast i8* %uid.130 to [6 x i8]*
store [6 x i8] c"false\00", [6 x i8]* %uid.131
%uid.132 = alloca i8*
store i8* %uid.130, i8** %uid.132
;!!end StringLiteral
%uid.129 = load i8** %uid.132
call void @printString(i8* %uid.129)
;!!end FuncalOperatorExpr
br label %Label5IfteEnd
Label5IfteEnd:
;!!end ifte
;!!ReturnStmt:
ret void
}
define i1 @implies(i1 %uid.133, i1 %uid.134) {
%uid.135 = alloca i1
store i1 %uid.133, i1* %uid.135
%uid.136 = alloca i1
store i1 %uid.134, i1* %uid.136
;!!end function header
;!!ReturnStmt:
;!!begin LogicalOrExpr:
;!!begin LogicalNot:
;!!begin and end of IdentifierExpr, passing "%uid.135" as "x"
%uid.138 = load i1* %uid.135
%uid.140 = xor i1 1, %uid.138
%uid.139 = alloca i1
store i1 %uid.140, i1* %uid.139;!!end LogicalNot
%uid.137 = load i1* %uid.139
;!!begin EqualExpr:
;!!begin and end of IdentifierExpr, passing "%uid.135" as "x"
%uid.142 = load i1* %uid.135
;!!begin and end of IdentifierExpr, passing "%uid.136" as "y"
%uid.143 = load i1* %uid.136
%uid.144 = icmp eqi1%uid.142, %uid.143
%uid.145 = alloca i1
store i1 %uid.144, i1* %uid.145
;!!end EqualExpr:
%uid.141 = load i1* %uid.145
%uid.146 = or i1 %uid.137, %uid.141
%uid.147 = alloca i1
store i1 %uid.146, i1* %uid.147
;!!end LogicalOrExpr
%uid.148 = load i1* %uid.147
ret i1 %uid.148
}
