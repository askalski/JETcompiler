;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

define i32 @main() {
;!!end function header
;!!begin DeclarationStmt, FieldValue == null
%uid.0 = alloca i32
;!!end DeclarationStmt
;!!begin IntegerLiteral:
%uid.2 = alloca i32
store i32 56, i32* %uid.2
;!!end IntegerLiteral:
;!!begin DeclarationStmt, FieldValue != null
%uid.1 = alloca i32
%uid.3 = load i32* %uid.2
store i32 %uid.3, i32* %uid.1
;!!end DeclarationStmt
;!! IfteStmt
;!!begin RelationExpr:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.1" as "y"
%uid.5 = load i32* %uid.1
;!!begin IntegerLiteral:
%uid.7 = alloca i32
store i32 45, i32* %uid.7
;!!end IntegerLiteral:
%uid.6 = load i32* %uid.7
%uid.8 = add i32 %uid.5, %uid.6
%uid.9 = alloca i32
store i32 %uid.8, i32* %uid.9
;!!end AddExpr:
%uid.4 = load i32* %uid.9
;!!begin IntegerLiteral:
%uid.11 = alloca i32
store i32 2, i32* %uid.11
;!!end IntegerLiteral:
%uid.10 = load i32* %uid.11
%uid.12 = icmp slr i32 %uid.4, %uid.10
%uid.13 = alloca i1
store i1 %uid.12, i1* %uid.13
;!!end RelationExpr
%uid.14 = load i1* %uid.13
br i1 %uid.14, label %Label0IfteTrue, label %Label1IfteFalse
Label0IfteTrue:
;!!begin AssignmentExpr:
;!!begin IntegerLiteral:
%uid.15 = alloca i32
store i32 1, i32* %uid.15
;!!end IntegerLiteral:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.16 = load i32* %uid.15
store i32 %uid.16, i32* %uid.0
;!!end AssignmentExpr:
br label %Label2IfteEnd
Label1IfteFalse:
;!!begin AssignmentExpr:
;!!begin IntegerLiteral:
%uid.17 = alloca i32
store i32 2, i32* %uid.17
;!!end IntegerLiteral:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.18 = load i32* %uid.17
store i32 %uid.18, i32* %uid.0
;!!end AssignmentExpr:
br label %Label2IfteEnd
Label2IfteEnd:
;!!end ifte
;!!begin FuncallOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.0" as "x"
%uid.19 = load i32* %uid.0
call void @printInt(i32 %uid.19)
;!!end FuncalOperatorExpr
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.20 = alloca i32
store i32 0, i32* %uid.20
;!!end IntegerLiteral:
%uid.21 = load i32* %uid.20
ret i32 %uid.21
}
