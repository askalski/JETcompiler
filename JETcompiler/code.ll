;Code generated by JETcompiler

declare i8*    @malloc(i32)
declare i8*    @calloc(i32, i32)
declare void   @free(i8*)
declare void   @printInt(i32)
declare void   @printDouble(double)
declare void   @printFloat(float)
declare void   @printString(i8*)
declare i32    @readInt()
declare double @readDouble()
declare float  @readFloat()

;!!Class definition: "xx":
%cls.xx = type { i32 }

;!!class constructor:
define void @cc.xx(%cls.xx* %this) {
;!!end class constructor header
ret void
}
define i32 @suma(%cls.xx* %this, i32 %uid.0) {
%uid.1 = alloca i32
store i32 %uid.0, i32* %uid.1
;!!end function header
;!!ReturnStmt:
;!!begin AddExpr:
;!!begin and end of IdentifierExpr, passing "%uid.1" as "a"
%uid.2 = load i32* %uid.1
;!!begin IdentifierExpr, case This is type of xx:
%uid.4 = getelementptr %cls.xx* %this, i32 0
%uid.5 = bitcast %cls.xx* %uid.4 to i32*
;!!end IdentifierExpr
%uid.3 = load i32* %uid.5
%uid.6 = add i32 %uid.2, %uid.3
%uid.7 = alloca i32
store i32 %uid.6, i32* %uid.7
;!!end AddExpr:
%uid.8 = load i32* %uid.7
ret i32 %uid.8
}
;!!end of class definition "xx"
define i32 @main() {
;!!end function header
;!!begin ArrayConstructorExpr:
;!!begin IntegerLiteral:
%uid.10 = alloca i32
store i32 4, i32* %uid.10
;!!end IntegerLiteral:
;!!begin Malloc.GenerateArrayAllocation([NamedType: xx]):
%uid.16 = load i32* %uid.10
%uid.11 = getelementptr %cls.xx* null, i32 1
%uid.12 = ptrtoint %cls.xx* %uid.11 to i32
%uid.13 = call i8* @calloc (i32 %uid.16, i32 %uid.12)
%uid.14 = bitcast i8* %uid.13 to %cls.xx*
%uid.15 = alloca %cls.xx*
store %cls.xx* %uid.14, %cls.xx** %uid.15
;!!en Malloc.GenerateArrayAllocation([NamedType: xx]):
;!!end ArrayConstructorExpr:
;!!begin DeclarationStmt, FieldValue != null
%uid.9 = alloca %cls.xx*
%uid.17 = load %cls.xx** %uid.15
store %cls.xx* %uid.17, %cls.xx** %uid.9
;!!end DeclarationStmt
;!!begin DeclarationStmt, FieldValue == null
%uid.18 = alloca i32
;!!end DeclarationStmt
;!!begin ForStmt:
;for stmt init:
;!!begin AssignmentExpr:
;!!begin IntegerLiteral:
%uid.19 = alloca i32
store i32 0, i32* %uid.19
;!!end IntegerLiteral:
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.20 = load i32* %uid.19
store i32 %uid.20, i32* %uid.18
;!!end AssignmentExpr:
;end of for stmt init
br label %Label0LoopCond
Label0LoopCond:
;!!begin RelationExpr:
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.21 = load i32* %uid.18
;!!begin IntegerLiteral:
%uid.23 = alloca i32
store i32 4, i32* %uid.23
;!!end IntegerLiteral:
%uid.22 = load i32* %uid.23
%uid.24 = icmp slt i32 %uid.21, %uid.22
%uid.25 = alloca i1
store i1 %uid.24, i1* %uid.25
;!!end RelationExpr
%uid.26 = load i1* %uid.25
br i1 %uid.26, label %Label1LoopBody, label %Label2LoopEnd
Label1LoopBody:
;!!begin AssignmentExpr:
;!!begin SimpleConstructorExpr
;!!begin Malloc.GenerateSingleAllocation([NamedType: xx]):
%uid.27 = getelementptr %cls.xx* null, i32 1
%uid.28 = ptrtoint %cls.xx* %uid.27 to i32
%uid.29 = call i8* @malloc (i32 %uid.28)
%uid.30 = bitcast i8* %uid.29 to %cls.xx*
;!!end Malloc.GenerateSingleAllocation([NamedType: xx]):
call void @cc.xx(%cls.xx* %uid.30)
;!!end SimpleConstructorExpr
;!!begin IndexOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.9" as "xy"
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.31 = load i32* %uid.18
%uid.32 = load %cls.xx** %uid.9
%uid.33 = getelementptr %cls.xx* %uid.32, i32 %uid.31
;!!end IndexOperatorExpr
%uid.34 = load %cls.xx* %uid.30
store %cls.xx %uid.34, %cls.xx* %uid.33
;!!end AssignmentExpr:
;!!begin DotOperaorExpr:
;!!begin IndexOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.9" as "xy"
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.35 = load i32* %uid.18
%uid.36 = load %cls.xx** %uid.9
%uid.37 = getelementptr %cls.xx* %uid.36, i32 %uid.35
;!!end IndexOperatorExpr
;!!begin AssignmentExpr:
;!!begin MultExpr:
;!!begin IntegerLiteral:
%uid.39 = alloca i32
store i32 2, i32* %uid.39
;!!end IntegerLiteral:
%uid.38 = load i32* %uid.39
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.40 = load i32* %uid.18
%uid.41 = mul i32 %uid.38, %uid.40
%uid.42 = alloca i32
store i32 %uid.41, i32* %uid.42
;!!end MultExpr
;!!begin IdentifierExpr, case This is type of xx:
%uid.43 = getelementptr %cls.xx* %uid.37, i32 0
%uid.44 = bitcast %cls.xx* %uid.43 to i32*
;!!end IdentifierExpr
%uid.45 = load i32* %uid.42
store i32 %uid.45, i32* %uid.44
;!!end AssignmentExpr:
;!!end DotOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin DotOperaorExpr:
;!!begin IndexOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.9" as "xy"
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.47 = load i32* %uid.18
%uid.48 = load %cls.xx** %uid.9
%uid.49 = getelementptr %cls.xx* %uid.48, i32 %uid.47
;!!end IndexOperatorExpr
;!!begin FuncallOperatorExpr:
;!!begin and end of IdentifierExpr, passing "%uid.18" as "i"
%uid.50 = load i32* %uid.18
%uid.51 = call i32 @suma(%cls.xx* %uid.49, i32 %uid.50)
;!!end FuncalOperatorExpr
%uid.52 = alloca i32
store i32 %uid.51, i32* %uid.52
;!!end DotOperatorExpr
%uid.46 = load i32* %uid.52
call void @printInt(i32 %uid.46)
;!!end FuncalOperatorExpr
br label %Label3IterExpr
Label3IterExpr:
;!!begin PrefixIncDecExpr:
%uid.54 = alloca i32%uid.53 = load i32* %uid.18
%uid.55 = add i32 %uid.53, 1
store i32 %uid.55, i32* %uid.18
store i32 %uid.55, i32* %uid.54
;!!end PrefixIncDecExpr
br label %Label0LoopCond
Label2LoopEnd:
;!!end ForStmt
;!!ReturnStmt:
;!!begin IntegerLiteral:
%uid.56 = alloca i32
store i32 0, i32* %uid.56
;!!end IntegerLiteral:
%uid.57 = load i32* %uid.56
ret i32 %uid.57
}
