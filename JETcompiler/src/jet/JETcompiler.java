package jet;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.PrintStream;
import java.io.StringWriter;
import java.util.List;

import jet.tree.Program;

import org.antlr.runtime.ANTLRFileStream;
import org.antlr.runtime.CommonTokenStream;
import org.antlr.runtime.EarlyExitException;
import org.antlr.runtime.MissingTokenException;
import org.antlr.runtime.NoViableAltException;
import org.antlr.runtime.UnwantedTokenException;

public class JETcompiler {

	/**
	 * @param args 
	 */
	public static void main(String[] args) {
		if(args.length != 1 && args.length != 3)
		{
			System.out.println("Wrong number of arguments.\n The proper usage is as follows:\n JETcompiler filename [-o output_filename] ");
			return;
		}
		
		String filename = args[0];
		
		String outputFilename;
		
		if(args.length == 3)
		{	if(args[1].equals("-o"))
				outputFilename = args[2];
			else
			{
				System.out.print("Unknown option \"" + args[1] + "\". Exiting.\n");
				return;
			}
		}
		else outputFilename = filename + ".out.ll";
		
		try{
			//koszmar konstruktor√≥w javy.
			JavaletteLexer lexer = new JavaletteLexer(new ANTLRFileStream(filename));
			CommonTokenStream tokens = new CommonTokenStream();
			tokens.setTokenSource(lexer);			
			JavaletteParser parser = new JavaletteParser(tokens);
			
			Program p = parser.program();
			
			List<String> errors = p.getTypeCheckResults();
			
			if(errors.size() == 0)
			{
				System.out.println("Program is correct.");
				
				java.io.FileOutputStream fos = new FileOutputStream(outputFilename);
				java.io.PrintStream pos = new PrintStream(fos);
				
				pos.print(getPrefixCode());
				pos.print(p.getCode());
				pos.close();
			}
			else
				for(String s : errors)
					System.out.println(s);
			
			
			
		}
		catch(FileNotFoundException fnf)
		{
			System.out.println("File \"" + filename + "\" not found.");
		}
		catch(EarlyExitException eee)
		{
			
		}
		catch(IllegalArgumentException iae)
		{
			Throwable reason = iae.getCause();
			if(reason instanceof NoViableAltException)
			{
				NoViableAltException nvae = (NoViableAltException)reason;
				System.out.println("Parsing error: no viable alternative for token: \"" + nvae.token.getText() + "\" in line " + nvae.token.getLine());
			}else if(reason instanceof EarlyExitException)
			{
				EarlyExitException eee = (EarlyExitException)reason;
				System.out.println("Parsing error: token \"" + eee.token.getText() + "\" ends unexpectedly in line " + eee.token.getLine());
			} else if(reason instanceof UnwantedTokenException)
			{
				UnwantedTokenException ute = (UnwantedTokenException)reason;
				System.out.println("Unexpected token: \"" + ute.token.getText() + "\" in line " + ute.token.getLine());
			} else if(reason instanceof MissingTokenException)
			{
				MissingTokenException mte = (MissingTokenException)reason;
				System.out.println("Unexpected token: \"" + mte.token.getText() + "\" in line " + mte.token.getLine());
			}
			else throw iae;
				
		}
		catch(Exception e)
		{
			System.out.println("Unhandled exception while parsing: ");
			e.printStackTrace(System.out);
		}
		return;
	}

	private static String getPrefixCode()
	{
		String res = "";
		
		res += ";Code generated by JETcompiler\n\n";
		
		res += "declare i8*    @malloc(i32)\n";
		res += "declare i8*    @calloc(i32, i32)\n";
		res += "declare void   @free(i8*)\n";
		res += "declare void   @printInt(i32)\n";
		res += "declare void   @printDouble(double)\n";
		res += "declare void   @printFloat(float)\n";
		res += "declare void   @printString(i8*)\n";
		res += "declare i32    @readInt()\n";
		res += "declare double @readDouble()\n";
		res += "declare float  @readFloat()\n\n";
		
//		res += "define i32 @main() {\n";
//		res += "entry:\n";
//		res += "%i1=call i32 @fun.main()\n";
//		res += "ret i32 %i1\n";
//		res += "}\n\n";

		return res;
	}
}
